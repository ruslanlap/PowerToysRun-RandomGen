name: Snyk Security Scan

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  security:
    runs-on: ubuntu-latest # Snyk container actions require a Linux runner
    permissions:
      security-events: write  # Required for GitHub Code Scanning integration
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better vulnerability detection

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      # Using Snyk CLI directly for better control
      - name: Run Snyk to check for vulnerabilities (.NET)
        continue-on-error: true  # Don't fail the build yet
        run: |
          mkdir -p snyk-reports
          npm install -g snyk
          if [ -n "$SNYK_TOKEN" ]; then
            snyk auth $SNYK_TOKEN
          fi
          snyk test --severity-threshold=medium --all-projects --detection-depth=6 --sarif-file-output=snyk-reports/snyk-dotnet.sarif

      # Check for vulnerabilities in GitHub Actions workflows
      - name: Run Snyk IaC scan
        run: |
          snyk iac test --severity-threshold=high --sarif-file-output=snyk-reports/snyk-iac.sarif
        continue-on-error: true

      # Combine SARIF files
      - name: Combine SARIF files
        run: |
          # List all SARIF files for debugging
          echo "SARIF files before moving:"
          find . -name "*.sarif" -type f -ls
          
          # Ensure directory exists
          mkdir -p snyk-reports
          
          # Copy SARIF files to the reports directory
          find . -name "*.sarif" -type f -exec cp {} snyk-reports/ \;
          
          # List files in the reports directory
          echo "Files in snyk-reports directory:"
          ls -la snyk-reports/
          
      # Upload findings to GitHub Code Scanning
      # Note: This step will only work in the actual GitHub environment, not in local testing
      - name: Upload SARIF file
        if: ${{ github.actor != 'nektos/act' }} # Skip during local act testing
        uses: github/codeql-action/upload-sarif@v3 # Updated to v3
        with:
          sarif_file: snyk-reports/snyk-dotnet.sarif
          category: snyk
          token: ${{ github.token }}

      # Run Snyk Monitor to continuously monitor the project
      - name: Monitor project in Snyk
        run: |
          # Try with project tags first, but fall back to basic monitoring if tags aren't supported
          snyk monitor --all-projects --project-tags=repo=${{ github.repository }},branch=${{ github.ref_name }} || \
          snyk monitor --all-projects

      # Check for outdated dependencies and report versions
      - name: Check for outdated dependencies
        run: |
          snyk test --all-projects --json-file-output=outdated-deps.json
        continue-on-error: true

      # Parse and output dependency versions
      - name: Report dependency versions
        run: |
          if [ ! -f outdated-deps.json ]; then
            echo "No outdated dependencies found."
            exit 0
          fi
          echo "::group::Dependency Versions Report"
          jq -r '.[] | .projectName as $project | .vulnerabilities[] | "Project: \($project)\n  - \(.packageName): Current=\(.from[0]), Latest=\(.upgradePath[0])\n"' outdated-deps.json
          echo "::endgroup::"

      # Fail the build if high severity issues are found
      - name: Check for high severity issues
        run: |
          snyk test --severity-threshold=high --fail-on=upgradable --all-projects
